/*
 * This file is generated by jOOQ.
 */
package com.cloud.kailuan.yjindex.db.tables;


import com.cloud.kailuan.yjindex.db.Lc;
import com.cloud.kailuan.yjindex.db.tables.records.LcFileInfoRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LcFileInfo extends TableImpl<LcFileInfoRecord> {

    private static final long serialVersionUID = 812943441;

    /**
     * The reference instance of <code>lc.lc_file_info</code>
     */
    public static final LcFileInfo LC_FILE_INFO = new LcFileInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LcFileInfoRecord> getRecordType() {
        return LcFileInfoRecord.class;
    }

    /**
     * The column <code>lc.lc_file_info.id</code>.
     */
    public final TableField<LcFileInfoRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>lc.lc_file_info.original_name</code>. 文件原始名字
     */
    public final TableField<LcFileInfoRecord, String> ORIGINAL_NAME = createField(DSL.name("original_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "文件原始名字");

    /**
     * The column <code>lc.lc_file_info.new_name</code>. 文件随机名称
     */
    public final TableField<LcFileInfoRecord, String> NEW_NAME = createField(DSL.name("new_name"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "文件随机名称");

    /**
     * The column <code>lc.lc_file_info.file_path</code>. 文件服务器存储绝对路径
     */
    public final TableField<LcFileInfoRecord, String> FILE_PATH = createField(DSL.name("file_path"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "文件服务器存储绝对路径");

    /**
     * The column <code>lc.lc_file_info.relative_path</code>. 文件相对路径，域名+此字段为该资源的请求地址
     */
    public final TableField<LcFileInfoRecord, String> RELATIVE_PATH = createField(DSL.name("relative_path"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "文件相对路径，域名+此字段为该资源的请求地址");

    /**
     * The column <code>lc.lc_file_info.del_flag</code>. 逻辑删除(默认0正常，1文件已被物理删除)
     */
    public final TableField<LcFileInfoRecord, Byte> DEL_FLAG = createField(DSL.name("del_flag"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "逻辑删除(默认0正常，1文件已被物理删除)");

    /**
     * The column <code>lc.lc_file_info.create_by</code>. 创建人
     */
    public final TableField<LcFileInfoRecord, String> CREATE_BY = createField(DSL.name("create_by"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "创建人");

    /**
     * The column <code>lc.lc_file_info.create_date</code>. 创建时间
     */
    public final TableField<LcFileInfoRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "创建时间");

    /**
     * The column <code>lc.lc_file_info.update_by</code>. 更新人
     */
    public final TableField<LcFileInfoRecord, String> UPDATE_BY = createField(DSL.name("update_by"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "更新人");

    /**
     * The column <code>lc.lc_file_info.update_date</code>. 更新时间
     */
    public final TableField<LcFileInfoRecord, LocalDateTime> UPDATE_DATE = createField(DSL.name("update_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "更新时间");

    /**
     * The column <code>lc.lc_file_info.remarks</code>. 文件备注
     */
    public final TableField<LcFileInfoRecord, String> REMARKS = createField(DSL.name("remarks"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "文件备注");

    /**
     * Create a <code>lc.lc_file_info</code> table reference
     */
    public LcFileInfo() {
        this(DSL.name("lc_file_info"), null);
    }

    /**
     * Create an aliased <code>lc.lc_file_info</code> table reference
     */
    public LcFileInfo(String alias) {
        this(DSL.name(alias), LC_FILE_INFO);
    }

    /**
     * Create an aliased <code>lc.lc_file_info</code> table reference
     */
    public LcFileInfo(Name alias) {
        this(alias, LC_FILE_INFO);
    }

    private LcFileInfo(Name alias, Table<LcFileInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private LcFileInfo(Name alias, Table<LcFileInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> LcFileInfo(Table<O> child, ForeignKey<O, LcFileInfoRecord> key) {
        super(child, key, LC_FILE_INFO);
    }

    @Override
    public Schema getSchema() {
        return Lc.LC;
    }

    @Override
    public TableField<LcFileInfoRecord, LocalDateTime> getRecordTimestamp() {
        return UPDATE_DATE;
    }

    @Override
    public LcFileInfo as(String alias) {
        return new LcFileInfo(DSL.name(alias), this);
    }

    @Override
    public LcFileInfo as(Name alias) {
        return new LcFileInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LcFileInfo rename(String name) {
        return new LcFileInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LcFileInfo rename(Name name) {
        return new LcFileInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, String, String, Byte, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
